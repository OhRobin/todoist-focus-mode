const cookie = require("cookie");
const { EleventyServerless } = require("@11ty/eleventy");
const { OAuth, tokens, getCookie } = require("../util/auth.js");

// Explicit dependencies for the bundler from config file and global data.
// The file is generated by the Eleventy Serverless Bundler Plugin.
require("./eleventy-bundler-modules.js");

async function handler(event) {
  let authToken;
  let provider;
  if (event.headers && event.headers.cookie) {
    let cookies = cookie.parse(event.headers.cookie);
    if (cookies._11ty_oauth_token) {
      authToken = tokens.decode(cookies._11ty_oauth_token);
    }
    if (cookies._11ty_oauth_provider) {
      provider = cookies._11ty_oauth_provider;
    }
  }

  let tasks;
  let authError;
  let projects;
  try {
    let oauth = new OAuth(provider);
    console.log(event.queryStringParameters);
    var link = "https://api.todoist.com/rest/v2/tasks";
    if (event.queryStringParameters.hasOwnProperty("filter")) {
      link += `?filter=${encodeURIComponent(event.queryStringParameters.filter)}`;
    }
    tasks = await oauth.getUser(authToken, link);
    projects = await oauth.getUser(authToken, "https://api.todoist.com/rest/v2/projects");
  } catch (e) {
    authError = e;
  }

  let elev = new EleventyServerless("dynamic", {
    path: event.path,
    query: event.queryStringParameters,
    functionsDir: "./netlify/functions/",
    config: function (eleventyConfig) {
      if (tasks) {
        eleventyConfig.addGlobalData("tasks", tasks);
        eleventyConfig.addGlobalData("projects", projects);
        eleventyConfig.addGlobalData("token", authToken);
      }

      // Adds `secure` data to JSON output
      eleventyConfig.dataFilterSelectors.add("secure");
    }
  });

  try {
    let [page] = await elev.getOutput();

    if ("logout" in event.queryStringParameters) {
      let redirectTarget = page.url; // default redirect to self
      if (page.data.secure && page.data.secure.unauthenticatedRedirect) {
        redirectTarget = page.data.secure.unauthenticatedRedirect;
      }

      console.log("Logging out");
      return {
        statusCode: 302,
        headers: {
          Location: redirectTarget,
          'Cache-Control': 'no-cache' // Disable caching of this response
        },
        multiValueHeaders: {
          'Set-Cookie': [
            getCookie("_11ty_oauth_token", "", -1),
            getCookie("_11ty_oauth_provider", "", -1),
          ]
        },
        body: ''
      };
    }

    // Secure pages
    if (page.data.secure && authError) {
      console.log("[serverless fn]", event.path, authToken, authError);

      // unauthenticated redirect
      return {
        statusCode: 302,
        headers: {
          Location: page.data.secure.unauthenticatedRedirect || "/",
          'Cache-Control': 'no-cache' // Disable caching of this response
        },
        body: ''
      };
    }

    return {
      statusCode: 200,
      headers: {
        "Content-Type": "text/html; charset=UTF-8",
      },
      body: page.content,
    };
  } catch (error) {
    // Only console log for matching serverless paths
    // (otherwise youâ€™ll see a bunch of BrowserSync 404s for non-dynamic URLs during --serve)
    if (elev.isServerlessUrl(event.path)) {
      console.log("Serverless Error:", error);
    }

    return {
      statusCode: error.httpStatusCode || 500,
      body: JSON.stringify(
        {
          error: error.message,
        },
        null,
        2
      ),
    };
  }
}

exports.handler = handler;